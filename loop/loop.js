// 반복문은 수없이 반복되는 데이터들을 다룰 수 있는 프로그래밍의 중요한 문법이다.
// 반복문은 주로 배열의 요소나 DOM에서 선택된 반복 객체 등을 다룰때 사용된다.

const arr = [1, 2, 3, 'a', 'b', { name: 'sora' }];

// 1. for in
// 구조 : for (변수 in 배열 또는 객체) {실행할 코드}
// for in문은 배열에서 사용할 경우 배열의 인덱스를 반복한다. 따라서 '변수'에는 배열의 각 인덱스가 차례대로 할당된다.
// '변수'에는 해당 배열의 인덱스가 할당된 것이지 그 안의 값이 할당된 게 아니므로 해당 인덱스의 값(value)을 출력하기 위해 '배열변수[변수]' 사용
// 해당 배열의 인덱스 요소값을 배열접근 방식으로 리턴할 수 있다. (리턴 = 출력)
for (const a in arr) {
  console.log(arr[a]);
}
// arr[a] : 배열 'arr'의 'a'번째 인덱스에 해당하는 요소(value)
// console.log(arr[idx]); : 배열의 모든 인덱스를 차례대로 순회, 마지막 인덱스 후 반복할 인덱스가 없기 때문에 조건이 거짓이 되어 루프 종료

// 2. for of
// 구조 : for (const 변수 of 배열 또는 객체) {실행할 코드}
// for in문과 다르게 for of문의 경우 변수에 할당된 데이터를 인덱스가 아니라 해당 인덱스의 값(value)을 직접 리턴한다.
for (const b of arr) {
  console.log(b);
}

// for in과 for of는 실제로 자주 사용되는 문법은 아니다. 이보다는 주로 for문이 많이 사용된다. 단, 파이썬에서는 for in을 자주 사용하므로 중요하다.

// 3. for
// 구조: for (let 변수 초기화 및 선언; 조건문; 증감연산자) {실행할 코드}
// for문의 경우 반복 횟수를 지정할 수 있어서 디데일한 컨트롤이 가능하다.
// for문의 반복 변수가 재할당되기 때문에 const 상수를 선언하면 안된다.

// signiture : for(let loop variable; loop.length; increment operator){} ▼ 설명
// for(let 변수 초기화 및 선언; 배열의 개수만큼 읽음(배열이 몇 천개씩 되는 길이도 다 읽음); 증감연산자) {실행할 코드}

// e는 0으로 초기화 및 선언되었고 d라는 배열의 '0'이라는 인덱스의 요소값(인덱스는 0부터 시작)이 d 배열의 개수의 값(3개)보다 작으므로 +1 증가하는 구조
// s += d[e] 와 s = s + d[e]는 같은 의미
// 따라서, s += d[e]는 현재의 s 값에 배열 d의 e번째 인덱스의 요소 값을 더함
const d = [1, 2, 3];
let s = 0;
for (let e = 0; e < d.length; e++) {
  s += d[e];
}
console.log(s);

// ▼ 위 코드의 루프 과정에 대해 엄청 풀어서 쓴 설명
// 1. e는 0으로 선언되었고 d라는 배열의 '0'이라는 인덱스의 요소값(인덱스는 0부터 시작)이 d 배열의 개수의 값(3)보다 작으므로 e의 값은 +1 증가(e++)한다.
// 2. s += d[e] 와 s = s + d[e]는 같은 의미이므로 즉, s = 0 + (d배열의 0번째 인덱스)1
//    따라서 s의 값은 1이 된다
// 3. 현재 e는 1의 값을 가진다
// 4. 아직 d라는 배열의 개수의 값보다 e의 값이 작으므로 e의 값은 +1 증가한다
// 5. s의 값이 1이 되었으므로 s = 1 + (d배열의 1번째 인덱스)2
//    따라서 s의 값은 3이 된다
// 6. 현재 e의 값은 2이다
// 7. 아직 d라는 배열의 개수보다 e의 값이 작으므로 e의 값은 +1 증가한다
// 8. s의 값이 3이 되었으므로 s = 3 + (d배열의 2번째 인덱스)3
//    따라서 s의 값은 6이 된다
// 9. 증가한 e의 값이 d라는 배열의 개수의 값보다 크므로 루프가 종료된다
// 10. 출력되는 s의 값은 6이 된다

let sum = 0;
for (let f = 1; f <= 100; f++) {
  sum = sum + f;
}
console.log(sum);

// 중첩 for문
for (let f = 2; f <= 9; f++) {
  console.log(f + '단');
  for (let g = 1; g <= 9; g++) {
    console.log(g + '*' + f + '=' + g * f);
  }
}
